#?ini charset="utf-8"?

#Please read the documentation for further information about this file configuration

[ContentTagMatch]
# It is possible to define the rules for associating the contents of a sub-tree of eZ Publish (i.e. objects of any type and their related attributes) to the structure of the tags contained in the IDML file.
# The OpenMagazine XML tags must be labelled with:
#  * two letters of the alphabet and one numeral (e.g. at1)
#  * one letter and one number (e.g. f1).
# The tags labelled by two letters and one number (such as at1) are first level tags and are therefore direct child tags of the root of the xml document.
# In these tags:
#  * the first character represents an abbreviation of the class identifier defined in the rule describing the Class[] (e.g. Class[a]=article )
#  * the second character represents an abbreviation of the attribute identifier defined in the rule describing the Atribute[] (e.g. Attribute[t]=title )
#  * the digit represents its order of priority in the content tree (e.g. 1 = the first article according to the container's priority)
# The tags defined by one letter of the alphabet and one number (e.g. f1) are children of first level tags that represent an attribute of the ezxmltext type.
# Using these tags it is possible to unpack the ezxmltag so that they may be represented separately in the graphical grid.
# In these tags:
#  * the letter of the alphabet represents the abbreviation of the ezxmltag custom identifier defined in the XMLTag[] rule (e.g. XMLTag[f]=factbox ) ,
#  * the number represents where the custom tag occurs within the content of the ezxmltext (e.g. 1 = the first factbox inserted in the text)

# Tree sample:
# content tree
# |
# |- first article
# | |
# | |- attribute title of first article
# | |- attribute intro of first article
# | |- attribute body of first article
# | | |- first factbox of attribute body of first article
# | | |- second factbox of attribute body of first article
# | | |- first embed image of attribute body of first article  
# | |- attribute author of first article
# |
# |- second article
# | |- attribute title of second article
# | |- attribute body of second article
# | | |- first factbox of attribute body of second article
# | | |- first embed image of attribute body of second article
# | |- attribute author of second article
# |
# |- third article
# | |- attribute title of first article
# | |- attribute intro of first article
# | |- attribute body of first article
# | | |- first factbox of attribute body of first article
# | | |- second factbox of attribute body of first article
# | | |- first embed image of attribute body of first article
# | |- attribute author of first article
#
# root
# |
# |-at1
# |-an1
# |-ab1
# | |-f1
# | |-f2
# | |-i1  
# |-aa1
# |
# |-ai2
# |-ab2
# | |-f1
# | |-i1
# |-aa2
# |       
# |-at3
# |-an3
# |-ab3
# | |-f1
# | |-f2
# |-aa3


Class[]
Class[a]=article

Attribute[]
Attribute[t]=title
Attribute[s]=short_title
Attribute[b]=body
Attribute[c]=caption
Attribute[i]=image
Attribute[n]=intro

XMLTag[]
XMLTag[f]=factbox
XMLTag[d]=alternative_text
XMLTag[i]=image

# Each type of attribute can have a php class associated with it, which handles the export or the import of the specific attribute. 
# The rule requires the attribute identifier to be the key and the name of the php class to be the value: e.g. AttributeHandler[foo]=eZIdmlCustomFoo
# The php class implements the eZIdmlCustomInterface.
# By default the handler eZIdmlCustomEzXmlText is applied by attributes of the type ezxmltext: for this reason it is unnecessary to specify them.
AttributeHandler[]

# Each type of custom ezxmltag may have a php class which handles the export or import of the specific custom ezxmltag.
# The rule requires the ezxmltag identifier to be the key and the name of the php class to be the value: e.g. AttributeHandler[alternative_text]=eZIdmlCustomAlternativeText
# The php class implements the eZIdmlCustomInterface
XMLTagHandler[]
XMLTagHandler[alternative_text]=eZIdmlCustomAlternativeText

# In this rule the default margin of error is defined for the relationship between the length of the original characters and the length of those imported by the contents of eZ. 
# The default value is 50. The formula used to calculate whether there is an error in the comparison between the character lengths is:
#  AbsoluteValue (100*length of original characters - length of imported characters)/ original character length > CharLengthratio
# If the formula result is greater than zero, the system produces an error which is displayable in the node view.
# It is possible to define a specific margin of error for every attribute or custom ezxmltag by specifying in the key the value defined in the Attribute[] and in the XMLTag[]
# E.g.:
# CharLengthRatio[title]=20
# CharLengthRatio[body/alternative_text]=15
DefaultCharLengthRatio=50



[ExportImagesSettings]
# Using this configuration line it is possible to resolve the problem of the synchronisation of images between the eZ filesystem and the local filesystem.
# Because the IDML file registers absolute image file paths it is suggested to share a folder on the web server with the local filesystem (using webdav, NFS, ...).
# If it is not possible to have a shared folder, it is possible to enable the download of a zip file containing the images and to specify a file path to a local folder from which to extract the zip file.
# See also: idml.ini/[ImageImport].

# If the value is 'enabled' in the OpenMagazine website toolbar a button will appear through which it is possible to download a zip file of the pictures related to the relevant section. 
DownloadZip=enabled

# Absolute path of the shared folder in the web server.
# E.g.: LanImagePath=/absolute/path/on/your/webserver/openmagazine-images/
LanImagePath=/home/developer/openmagazine-images/

# Absolute path of the picture folder in the local filesystem.
# E.g.: LocalImagePath=/absolute/path/on/your/local/filesystem/openmagazine-images/
LocalImagePath=/Volumes/openmagazine/


# [ExportSettings] and [ExportClassSettings] 
# Through these configurations it is possible to define the types of exports.
# In JSON the system shows the list of class nodes defined in ExportClassSettings/MagazineContainerClassIdentifier downloadable at the following address:
# http://<site_url_with_siteaccess>/openmagazine/list/0/<export_handler>
# In this list there are the addresses for exporting each class node defined in ExportClassSettings/MagazineSectionClassIdentifier and the related pictures in the format defined by the export_handler.
# The available values are indesign and xpress.
# The indesign handler shows the IDML files of the selected magazine and the ZIP files of the related pictures.
# The xpress handler shows the XTG files for each article of the selected magazine and the files of the related pictures.

[ExportClassSettings]

# Node ID of the exportable node container: the default is node 2. 
# The system shows all the nodes defined in ExportClassSettings/MagazineContainerClassIdentifier descending from the node defined here.
MagazineParentNode=2

# Here are defined the 'container' classes accepted for export.
MagazineContainerClassIdentifier[]
MagazineContainerClassIdentifier[]=magazine_container

# Here are defined the 'section' classes accepted for export.
MagazineSectionClassIdentifier[]
MagazineSectionClassIdentifier[]=magazine_section

[ExportSettings]

# API of default export: the default handler is used to create the list of class nodes defined in the available ExportClassSettings/MagazineContainerClassIdentifier and as a fallback in the case of a  non-existent export_handler.
DefaultHandler=OpenMagazine_default_ExportHandler

# Export handlers for indesign and xpress.
ExportHandlers[]=OpenMagazine_xpress_ExportHandler
ExportHandlers[]=OpenMagazine_indesign_ExportHandler

# ContentClass Attribute Identifier (boolean) of Magazine Container content classes that indicates whether a magazine is complete.
# If this value is set, only the completed magazines can be downloaded otherwise all magazines can be downloaded.
MagazineCompletedAttributeIdentifier=magazine_status
